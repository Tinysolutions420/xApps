Detailed Explanation of the Routing Manager in RIC
The Routing Manager (RM) is a fundamental platform service in the Near-RT RIC (Near-Real-Time RAN Intelligent Controller). Its primary role is to distribute routing policies among RIC components and xApps to ensure efficient message flow.
1. How the Routing Manager Gets xApp Details from the xApp Manager
To function correctly, the Routing Manager needs a list of active xApps and their details. This information is retrieved from the xApp Manager using two methods:
a) HTTP Getter (httpGetter)
The Routing Manager periodically queries the xApp Manager for an updated xApp list.
The xApp Manager responds with a JSON-formatted list of available xApps.
The Routing Manager then processes this data to update its routing policies.
b) HTTP RESTful (httpRESTful - Webhook Subscription)
Instead of periodically querying the xApp Manager, this method starts an HTTP server within the Routing Manager.
The Routing Manager subscribes to a webhook in the xApp Manager.
Whenever an xApp is added or removed, the xApp Manager automatically notifies the Routing Manager with the updated xApp list.
The Routing Manager stores this data and updates routing policies dynamically.
:point_right: Key Difference:
httpGetter is pull-based (periodic polling).
httpRESTful is push-based (event-driven updates).
2. How the Routing Manager Processes xApp Data and Distributes Routing Policies
Once the xApp data is received using either method, the Routing Manager:
Stores the xApp data in a local filesystem or database.
Processes the data to generate routing policies using the Routing Policy Engine (RPE).
Distributes the routing policies to all xApps and RIC components using specific communication channels (NNG Pub/Pipeline).
3. Routing Manager Architecture & Functions
The Routing Manager consists of five core functional components:
a) NorthBound Interface (NBI)
Purpose: Handles communication between the Routing Manager and RIC manager components (such as the xApp Manager).
Supports:
httpGet: Retrieves the xApps' list using simple HTTP GET requests.
httpRESTful: Provides REST API endpoints for webhook subscriptions.
b) Routing Policy Engine (RPE)
Purpose: Processes xApp data and generates routing policies to determine how messages should be forwarded.
Supports:
RMR-based routing policies (formatted for the RIC Message Router, RMR).
c) Shared Data Layer (SDL)
Purpose: Provides access to persistent storage for xApp data and routing policies.
Supports:
File Storage: Stores xApp data in a container’s local filesystem.
(Backlog) SDL-Redis Integration: Future support for storing data in a Redis database for scalability.
d) SouthBound Interface (SBI)
Purpose: Manages communication between the Routing Manager and RIC tenants (xApps, control components, etc.).
Supports:
NNG Pub Channel (nngpub): Publishes routing policies to xApps.
NNG Pipeline Channel (nngpipe): Sends routing policies using NNG Pipeline for sequential message forwarding.
e) Control Logic (RTMGR)
Purpose: Manages and controls the above four components.
Ensures that routing updates, message exchanges, and data storage operate smoothly.
4. Current Implementation Features
The Routing Manager currently supports:
 :white_check_mark: NBI (NorthBound Interface)
httpGet – Fetches xApps list via a simple HTTP GET request.
httpRESTful – Listens for xApp updates via a REST API webhook.
:white_check_mark: RPE (Routing Policy Engine)
rmr – Generates routing policies formatted for the RIC Message Router (RMR).
:white_check_mark: SDL (Shared Data Layer)
file – Stores xApp data in the container's local filesystem or mounted storage.
(Backlog) sdl – Future support for storing data in a Redis database.
:white_check_mark: SBI (SouthBound Interface)
nngpub – Publishes routing policies using NNG Pub (publish-subscribe model).
nngpipe – Distributes routing policies using NNG Pipeline (message passing).
5. Summary
The Routing Manager is a core service in the Near-RT RIC, responsible for routing policies and xApp message distribution.
It retrieves xApp data using httpGetter (polling) or httpRESTful (webhooks).
It stores, processes, and distributes routing policies using a Routing Policy Engine (RPE).
It uses NNG Pub/Pipeline channels to deliver policies to xApps.
Future improvements include Redis integration for better scalability.
:rocket: Why Is This Important?
The Routing Manager ensures efficient xApp communication, dynamic message routing, and scalable policy management, all of which are critical for the AI-driven optimization of Open RAN networks.
11:19
. (edited) 






